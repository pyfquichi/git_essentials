#---------------------
# personal config
#---------------------
git config --global user.name "William JuanSon"
git config --global user.email "wquinter@gmail.com"
git config --global color.ui "auto"

# mac/linux
#---------------------
git config --global core.editor "subl -n -w"

# windows
#---------------------
git config --global core.editor "'C:\Program Files\Sublime Text 3\sublime_text.exe' -w"

git config --global core.editor "'C:\Program Files (x86)\Notepad++\notepad++.exe' -multiInst -notabbar -nosession -noPlugin"

# check settings
#---------------------
git config --list


#---------------------
# create git repository
#---------------------
pwd
mkdir git
cd git
mkdir git_lesson
cd git_lesson
git init
git status

#---------------------
# Track changes
#---------------------

# create README.md file and commit using the editor to add the commit message
git status
git add README.md
git commit
git log

# Modify README.md and commit
git status
git add README.md
git commit -m "A second commit to the README.md file"
git log --oneline

# Modify README.md and commit
git status
git add README.md
git commit -m "This is the third change to the README.md file"
git log --oneline

# Modify README.md, see what has changed, add all changes, then commit using single line message with single quote
git status
git diff
git add .
git status
git commit -m 'what is git'
git log --oneline

# Modify, see status, see diff, add to stage, diff with staged 
git status
git diff
git add .
git status
git diff --staged
git commit -m 'I remembered the change.'
git log --oneline

#---------------------
# look around
#---------------------

# look around, diff with previous commit, e.g. HEAD~1 vs HEAD
git log --oneline
git diff HEAD~1
git diff HEAD~1 HEAD
git diff e43813a

# look around, diff with 2 previous commits, e.g. HEAD~2 vs HEAD
git log --oneline
git diff HEAD~2
git diff HEAD~2 HEAD
git diff 7724696

# look around, what was added in commit HEAD~2
git log --oneline
git diff HEAD~3 HEAD~2
git diff 22e679a 7724696

# checkout README.md to previous change
git checkout HEAD~1 README.md
git status
git diff --staged
git commit -m 'delete line I forgot about.'
git log --oneline

# Move the head to HEAD~3  (7724696), getting ready to create a branch (detached HEAD gets created)
git checkout HEAD~3

# Move head back to master
git checkout master

#---------------------
# Undo changes
#---------------------

# Ignore changes to README.md
rm README.md
git status
git checkout master README.md

# unstage a change
git checkout HEAD~1 README.md
git status
git diff --staged
git reset HEAD README.md

# Undoing changes
git reset --hard
git checkout master README.md

#---------------------
# Ignore things in git
#---------------------
mkdir src docs data
touch src/.gitkeep
touch docs/.gitkeep
touch data/.gitkeep
git status
mkdir output
touch output/.gitkeep
git add .
git status
git commit -m 'create src docs data output folders'
cd docs
git add nobel.tex
git commit -m 'nobel tex file'

-- Install https://www.tug.org/texlive/
-- or convert the file using https://convertfiles.online/convert/tex/pdf

git status
vi .gitignore
git status
git add .
git commit -m 'add ignore file for tex files'
git add .
git commit -m 'using patterns in ignore file'

-- force an ignored file
git add nobel.pdf -f
git commit -m 'force added pdf output'
 
 
#---------------------
# Remote branches, using HTTPS
#---------------------
git remote add origin https://github.com/pyfquichi/git_lesson.git
git remote -v

# git push <where> <what>
git push origin master

#---------------------
# Use remotes with SSH
#---------------------
cd ~
ssh-keygen
cd .ssh
cat id_rsa.pub
-- copy and add to github 

cd ~/git/git_lesson
git remote -v
git remote rm origin
git remote add origin git@github.com:pyfquichi/git_lesson.git
git remote -v

#---------------------------
# Use branches on your own
#---------------------------
git branch -help
git branch -a
git branch my_branch
git branch -a
git checkout my_branch
git status
git branch -a

# Create branch and checkout 
git branch -a
git status
git checkout -b my_branch_with_checkout
git branch -a
git status

# Delete branch
git branch -d my_branch
git branch -a
git status
git checkout master
git branch -d my_branch_with_checkout

# Create new branch, add some commits
git checkout -b my_branch
git commit -a -m 'added second function for calculating square'
git log --oneline

# Change branches and see differences on file
cat my_square.py
git checkout master
cat my_square.py
git log --oneline --all --decorate --graph

# merge changes from my_branch into master, push changes to remote (origin)
git checkout master
git merge my_branch
git push origin master

# merge changes using "pull requests" (using github)
git checkout -b document_src_functions
git commit -a -m 'add documentation for squares'
git log --oneline --all --decorate --graph
git push origin document_src_functions
git log --oneline --all --decorate --graph

# pull after the merge done on github
git checkout master
git pull origin master
git log --oneline --all --decorate --graph

# clean up branches
git branch -a
git fetch --prune
git branch -d my_branch
git branch -d document_src_functions
git branch -a

# git workflows, create README.md file inside /docs
git checkout -b development
git checkout -b feature/document_docs
git branch -a
git status
git add .
git commit -m 'added docs to doc fixes #2'
ls -l

# push the new branches, use github to merge (pull request)
git checkout development
git push origin development

git checkout feature/document_docs
git push origin feature/document_docs

# pull changes from github
git checkout development
git pull origin development

# clean up branches
git branch -a
git fetch --prune
git branch -d feature/document_docs
git branch -a

# more branches: create new branch, add README.md files to all folders, commit
git checkout -b feature/folder_documentation
git log --oneline --all --decorate --graph
git add .
git commit -m 'added documentation in folders, fixes #2'
git push origin feature/folder_documentation

# pull changes from github
git checkout development
git pull origin development

# clean up branches
git branch -a
git fetch --prune
git branch -d feature/folder_documentation
git branch -a

# pull changes from github
git checkout master
git pull origin master
git log --oneline --all --decorate --graph

# development branch is behind master, REBASE to master to fix it
git checkout development
git rebase master
git log --oneline --all --decorate --graph
git push origin development
git log --oneline --all --decorate --graph

ppp-- 3.8